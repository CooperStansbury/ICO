%  consent power role is subclass of deontic power role
%  entity: ICO_0000223
all x (ConsentPowerRole(x) -> DeonticPowerRole(x)). 

%  stasis of anonymization is subclass of stasis of generically dependent continuant
%  entity: ICO_0000226
all x (StasisOfAnonymization(x) -> StasisOfGenericallyDependentContinuant(x)). 

%  stasis of regulation is subclass of stasis of generically dependent continuant
%  entity: ICO_0000226
all x (StasisOfRegulation(x) -> StasisOfGenericallyDependentContinuant(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000222
all x (Symbol(x) -> InformationContentEntity(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000222
all x (Symbol(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000222
all x (Utterance(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000222
all x (Utterance(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000222
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000222
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000222
all x (DataItem(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000222
all x (DataItem(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000222
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000222
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000222
all x (Signature(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000222
all x (Signature(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000222
all x (Figure(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000222
all x (Figure(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000222
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000222
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000222
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000222
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000222
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000222
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000222
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000222
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000222
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000222
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000222
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000222
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000222
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000222
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000222
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000222
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000222
all x (Document(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000222
all x (Document(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000222
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000222
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000222
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000222
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000222
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000222
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000221
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000221
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  deontic declaration is subclass of social act
%  entity: ICO_0000221
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DeonticDeclaration(x) -> SocialAct(x)). 

%  act of informing is subclass of social act
%  entity: ICO_0000221
all x (ActOfInforming(x) -> SocialAct(x)). 

%  act of communicating assent is subclass of social act
%  entity: ICO_0000221
all x (ActOfCommunicatingAssent(x) -> SocialAct(x)). 

%  population is subclass of material entity
%  entity: ICO_0000220
all x (Population(x) -> MaterialEntity(x)). 

%  collection of organisms is subclass of material entity
%  entity: ICO_0000220
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CollectionOfOrganisms(x) -> MaterialEntity(x)). 

%  specimen is subclass of material entity
%  entity: ICO_0000220
all x (Specimen(x) -> MaterialEntity(x)). 

%  document act target is subclass of material entity
%  entity: ICO_0000220
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DocumentActTarget(x) -> MaterialEntity(x)). 

%  disorder is subclass of material entity
%  entity: ICO_0000220
all x (Disorder(x) -> MaterialEntity(x)). 

%  Material anatomical entity is subclass of material entity
%  entity: ICO_0000220
all x (MaterialAnatomicalEntity(x) -> MaterialEntity(x)). 

%  organization is subclass of material entity
%  entity: ICO_0000220
all x (Organization(x) -> MaterialEntity(x)). 

%  material information bearer is subclass of material entity
%  entity: ICO_0000220
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (MaterialInformationBearer(x) -> MaterialEntity(x)). 

%  fiat object is subclass of material entity
%  entity: ICO_0000220
all x (FiatObject(x) -> MaterialEntity(x)). 

%  object is subclass of material entity
%  entity: ICO_0000220
all x (Object(x) -> MaterialEntity(x)). 

%  object aggregate is subclass of material entity
%  entity: ICO_0000220
all x (ObjectAggregate(x) -> MaterialEntity(x)). 

%  agent is subclass of material entity
%  entity: ICO_0000220
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Agent(x) -> MaterialEntity(x)). 

%  organism is subclass of material entity
%  entity: ICO_0000220
all x (Organism(x) -> MaterialEntity(x)). 

%  aggregate of organizations is subclass of material entity
%  entity: ICO_0000220
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (AggregateOfOrganizations(x) -> MaterialEntity(x)). 

%  act of removing identifiable information is subclass of act of anonymizing
%  entity: ICO_0000218
all x (ActOfRemovingIdentifiableInformation(x) -> ActOfAnonymizing(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000217
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000217
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000217
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000217
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000217
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000217
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000217
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000217
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000217
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000217
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000217
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000217
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000217
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000217
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000217
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000217
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000217
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000217
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000217
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000217
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000217
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000217
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000217
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000217
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000217
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000217
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000217
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000217
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000217
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000217
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000217
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000217
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000217
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000217
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000217
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000217
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000217
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000217
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000217
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000217
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000217
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000217
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000217
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000217
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  deontic power role is subclass of deontic role
%  entity: ICO_0000215
all x (DeonticPowerRole(x) -> DeonticRole(x)). 

%  permission role is subclass of deontic role
%  entity: ICO_0000215
all x (PermissionRole(x) -> DeonticRole(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000214
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000214
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000214
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000214
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000214
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000214
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000214
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000213
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000213
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000213
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000213
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000213
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000213
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000213
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  author role is subclass of role
%  entity: ICO_0000203
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000203
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000203
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000203
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000203
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000203
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000203
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000203
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000203
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000203
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000203
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000203
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000203
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000203
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000203
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000203
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000203
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000203
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000203
all x (ContactRole(x) -> Role(x)). 

%  competency to consent is subclass of capability to consent
%  entity: ICO_0000202
all x (CompetencyToConsent(x) -> CapabilityToConsent(x)). 

%  risk is subclass of disposition
%  entity: ICO_0000201
all x (Risk(x) -> Disposition(x)). 

%  benefit is subclass of disposition
%  entity: ICO_0000201
all x (Benefit(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000201
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000201
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  function is subclass of disposition
%  entity: ICO_0000201
all x (Function(x) -> Disposition(x)). 

%  deontic power role is subclass of deontic role
%  entity: ICO_0000199
all x (DeonticPowerRole(x) -> DeonticRole(x)). 

%  permission role is subclass of deontic role
%  entity: ICO_0000199
all x (PermissionRole(x) -> DeonticRole(x)). 

%  author role is subclass of role
%  entity: ICO_0000198
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000198
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000198
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000198
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000198
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000198
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000198
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000198
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000198
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000198
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000198
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000198
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000198
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000198
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000198
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000198
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000198
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000198
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000198
all x (ContactRole(x) -> Role(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000197
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000197
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  deontic declaration is subclass of social act
%  entity: ICO_0000197
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DeonticDeclaration(x) -> SocialAct(x)). 

%  act of informing is subclass of social act
%  entity: ICO_0000197
all x (ActOfInforming(x) -> SocialAct(x)). 

%  act of communicating assent is subclass of social act
%  entity: ICO_0000197
all x (ActOfCommunicatingAssent(x) -> SocialAct(x)). 

%  act of informed consenting is subclass of act of permitting
%  entity: ICO_0000196
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ActOfInformedConsenting(x) -> ActOfPermitting(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000195
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  act of permitting is subclass of social act
%  entity: ICO_0000195
all x (ActOfPermitting(x) -> SocialAct(x)). 

%  deontic declaration is subclass of social act
%  entity: ICO_0000195
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DeonticDeclaration(x) -> SocialAct(x)). 

%  act of informing is subclass of social act
%  entity: ICO_0000195
all x (ActOfInforming(x) -> SocialAct(x)). 

%  act of communicating assent is subclass of social act
%  entity: ICO_0000195
all x (ActOfCommunicatingAssent(x) -> SocialAct(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000193
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000193
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000193
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000193
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000193
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000193
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000193
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000193
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000193
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000193
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000193
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000193
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000193
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000193
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000193
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000193
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000193
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000193
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000193
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000193
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000193
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000193
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000193
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000193
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000193
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000193
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000193
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000193
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000193
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000193
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000193
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000193
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000193
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000193
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000193
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000193
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000193
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000193
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000193
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000193
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000193
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000193
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000193
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000193
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  description of participation benefit is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfParticipationBenefit(x) -> DescriptiveInformationContentEntity(x)). 

%  description of participation risk is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfParticipationRisk(x) -> DescriptiveInformationContentEntity(x)). 

%  legally authorized representative role is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (LegallyAuthorizedRepresentativeRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of voluntary participation is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfVoluntaryParticipation(x) -> DescriptiveInformationContentEntity(x)). 

%  description of broad consent is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfBroadConsent(x) -> DescriptiveInformationContentEntity(x)). 

%  desciption of research procedure is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DesciptionOfResearchProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  IRB member role is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (IrbMemberRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of trigger condition is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfTriggerCondition(x) -> DescriptiveInformationContentEntity(x)). 

%  description of medical procedure is subclass of descriptive information content entity
%  entity: ICO_0000192
all x (DescriptionOfMedicalProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  description of participation benefit is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfParticipationBenefit(x) -> DescriptiveInformationContentEntity(x)). 

%  description of participation risk is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfParticipationRisk(x) -> DescriptiveInformationContentEntity(x)). 

%  legally authorized representative role is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (LegallyAuthorizedRepresentativeRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of voluntary participation is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfVoluntaryParticipation(x) -> DescriptiveInformationContentEntity(x)). 

%  description of broad consent is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfBroadConsent(x) -> DescriptiveInformationContentEntity(x)). 

%  desciption of research procedure is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DesciptionOfResearchProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  IRB member role is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (IrbMemberRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of trigger condition is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfTriggerCondition(x) -> DescriptiveInformationContentEntity(x)). 

%  description of medical procedure is subclass of descriptive information content entity
%  entity: ICO_0000190
all x (DescriptionOfMedicalProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  data format specification is subclass of directive information entity
%  entity: ICO_0000189
all x (DataFormatSpecification(x) -> DirectiveInformationEntity(x)). 

%  deontic role directive is subclass of directive information entity
%  entity: ICO_0000189
all x (DeonticRoleDirective(x) -> DirectiveInformationEntity(x)). 

%  obligation directive is subclass of directive information entity
%  entity: ICO_0000189
all x (ObligationDirective(x) -> DirectiveInformationEntity(x)). 

%  conditional specification is subclass of directive information entity
%  entity: ICO_0000189
all x (ConditionalSpecification(x) -> DirectiveInformationEntity(x)). 

%  confidentiality directive is subclass of directive information entity
%  entity: ICO_0000189
all x (ConfidentialityDirective(x) -> DirectiveInformationEntity(x)). 

%  restriction directive is subclass of directive information entity
%  entity: ICO_0000189
all x (RestrictionDirective(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000189
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000189
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  liability directive is subclass of directive information entity
%  entity: ICO_0000189
all x (LiabilityDirective(x) -> DirectiveInformationEntity(x)). 

%  ethics directive is subclass of directive information entity
%  entity: ICO_0000189
all x (EthicsDirective(x) -> DirectiveInformationEntity(x)). 

%  action specification is subclass of directive information entity
%  entity: ICO_0000189
all x (ActionSpecification(x) -> DirectiveInformationEntity(x)). 

%  consequent directive is subclass of directive information entity
%  entity: ICO_0000189
all x (ConsequentDirective(x) -> DirectiveInformationEntity(x)). 

%  answer directive is subclass of directive information entity
%  entity: ICO_0000189
all x (AnswerDirective(x) -> DirectiveInformationEntity(x)). 

%  permission directive is subclass of directive information entity
%  entity: ICO_0000189
all x (PermissionDirective(x) -> DirectiveInformationEntity(x)). 

%  contact directive is subclass of directive information entity
%  entity: ICO_0000189
all x (ContactDirective(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000189
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000189
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000189
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  recontact method directive is subclass of directive information entity
%  entity: ICO_0000189
all x (RecontactMethodDirective(x) -> DirectiveInformationEntity(x)). 

%  disclosure directive is subclass of directive information entity
%  entity: ICO_0000189
all x (DisclosureDirective(x) -> DirectiveInformationEntity(x)). 

%  objective specification is subclass of directive information entity
%  entity: ICO_0000189
all x (ObjectiveSpecification(x) -> DirectiveInformationEntity(x)). 

%  source code module is subclass of directive information entity
%  entity: ICO_0000189
all x (SourceCodeModule(x) -> DirectiveInformationEntity(x)). 

%  author role is subclass of role
%  entity: ICO_0000188
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000188
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000188
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000188
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000188
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000188
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000188
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000188
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000188
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000188
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000188
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000188
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000188
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000188
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000188
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000188
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000188
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000188
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000188
all x (ContactRole(x) -> Role(x)). 

%  author role is subclass of role
%  entity: ICO_0000187
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000187
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000187
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000187
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000187
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000187
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000187
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000187
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000187
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000187
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000187
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000187
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000187
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000187
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000187
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000187
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000187
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000187
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000187
all x (ContactRole(x) -> Role(x)). 

%  informed assent form for cognitively impaired is subclass of informed assent form
%  entity: ICO_0000185
all x (InformedAssentFormForCognitivelyImpaired(x) -> InformedAssentForm(x)). 

%  informed assent form for child or minor is subclass of informed assent form
%  entity: ICO_0000185
all x (InformedAssentFormForChildOrMinor(x) -> InformedAssentForm(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000181
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000181
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000181
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000181
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000181
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000181
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000181
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000181
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000181
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000181
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000181
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000181
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000181
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000181
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000181
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000181
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000181
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000181
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000181
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000181
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000181
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000181
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000181
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000181
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000181
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000181
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000181
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000181
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000181
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000181
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000181
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000181
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000181
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000181
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000181
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000181
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000181
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000181
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000181
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000181
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000181
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000181
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000181
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000181
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  consenting not to have financial benefit is subclass of act of informed consenting
%  entity: ICO_0000177
all x (ConsentingNotToHaveFinancialBenefit(x) -> ActOfInformedConsenting(x)). 

%  informed verbal consent is subclass of act of informed consenting
%  entity: ICO_0000177
all x (InformedVerbalConsent(x) -> ActOfInformedConsenting(x)). 

%  yes answer text entity is subclass of filled multiple choice text entity
%  entity: ICO_0000173
all x (YesAnswerTextEntity(x) -> FilledMultipleChoiceTextEntity(x)). 

%  no answer text entity is subclass of filled multiple choice text entity
%  entity: ICO_0000173
all x (NoAnswerTextEntity(x) -> FilledMultipleChoiceTextEntity(x)). 

%  yes answer text entity is subclass of filled multiple choice text entity
%  entity: ICO_0000172
all x (YesAnswerTextEntity(x) -> FilledMultipleChoiceTextEntity(x)). 

%  no answer text entity is subclass of filled multiple choice text entity
%  entity: ICO_0000172
all x (NoAnswerTextEntity(x) -> FilledMultipleChoiceTextEntity(x)). 

%  filled multiple choice text entity is subclass of textual entity
%  entity: ICO_0000171
all x (FilledMultipleChoiceTextEntity(x) -> TextualEntity(x)). 

%  table is subclass of textual entity
%  entity: ICO_0000171
all x (Table(x) -> TextualEntity(x)). 

%  citation is subclass of textual entity
%  entity: ICO_0000171
all x (Citation(x) -> TextualEntity(x)). 

%  citation is subclass of textual entity
%  entity: ICO_0000171
all x (Citation(x) -> TextualEntity(x)). 

%  conclusion textual entity is subclass of textual entity
%  entity: ICO_0000171
all x (ConclusionTextualEntity(x) -> TextualEntity(x)). 

%  hypothesis textual entity is subclass of textual entity
%  entity: ICO_0000171
all x (HypothesisTextualEntity(x) -> TextualEntity(x)). 

%  document title is subclass of textual entity
%  entity: ICO_0000171
all x (DocumentTitle(x) -> TextualEntity(x)). 

%  written name is subclass of textual entity
%  entity: ICO_0000171
all x (WrittenName(x) -> TextualEntity(x)). 

%  question textual entity is subclass of textual entity
%  entity: ICO_0000171
all x (QuestionTextualEntity(x) -> TextualEntity(x)). 

%  institutional identification is subclass of textual entity
%  entity: ICO_0000171
all x (InstitutionalIdentification(x) -> TextualEntity(x)). 

%  caption is subclass of textual entity
%  entity: ICO_0000171
all x (Caption(x) -> TextualEntity(x)). 

%  caption is subclass of textual entity
%  entity: ICO_0000171
all x (Caption(x) -> TextualEntity(x)). 

%  postal address is subclass of textual entity
%  entity: ICO_0000171
all x (PostalAddress(x) -> TextualEntity(x)). 

%  postal address is subclass of textual entity
%  entity: ICO_0000171
all x (PostalAddress(x) -> TextualEntity(x)). 

%  investigation title is subclass of textual entity
%  entity: ICO_0000171
all x (InvestigationTitle(x) -> TextualEntity(x)). 

%  investigation title is subclass of textual entity
%  entity: ICO_0000171
all x (InvestigationTitle(x) -> TextualEntity(x)). 

%  genetic research permission deontic declaration is subclass of deontic declaration
%  entity: ICO_0000168
all x (GeneticResearchPermissionDeonticDeclaration(x) -> DeonticDeclaration(x)). 

%  document act is subclass of deontic declaration
%  entity: ICO_0000168
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DocumentAct(x) -> DeonticDeclaration(x)). 

%  tissue sample collecting is subclass of biological sample collecting
%  entity: ICO_0000163
all x (TissueSampleCollecting(x) -> BiologicalSampleCollecting(x)). 

%  blood sample collecting is subclass of biological sample collecting
%  entity: ICO_0000163
all x (BloodSampleCollecting(x) -> BiologicalSampleCollecting(x)). 

%  tissue sample collecting is subclass of biological sample collecting
%  entity: ICO_0000162
all x (TissueSampleCollecting(x) -> BiologicalSampleCollecting(x)). 

%  blood sample collecting is subclass of biological sample collecting
%  entity: ICO_0000162
all x (BloodSampleCollecting(x) -> BiologicalSampleCollecting(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000161
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000161
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000161
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000161
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000161
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000161
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000161
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000161
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000161
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000161
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000161
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000161
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000161
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000161
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000161
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000161
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000161
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000161
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000161
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000161
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000161
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000161
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000161
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000161
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000161
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000161
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000161
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000161
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000161
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000161
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000161
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000161
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000161
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000161
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000161
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000161
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000161
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000161
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000161
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000161
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000161
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000161
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000161
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000161
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  adult consent process is subclass of informed consent process
%  entity: ICO_0000160
all x (AdultConsentProcess(x) -> InformedConsentProcess(x)). 

%  consenting in short form is subclass of informed consent process
%  entity: ICO_0000160
all x (ConsentingInShortForm(x) -> InformedConsentProcess(x)). 

%  parental informed consent process is subclass of informed consent process
%  entity: ICO_0000160
all x (ParentalInformedConsentProcess(x) -> InformedConsentProcess(x)). 

%  informed consent process with assent is subclass of informed consent process
%  entity: ICO_0000160
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (InformedConsentProcessWithAssent(x) -> InformedConsentProcess(x)). 

%  consenting not to have financial benefit is subclass of act of informed consenting
%  entity: ICO_0000159
all x (ConsentingNotToHaveFinancialBenefit(x) -> ActOfInformedConsenting(x)). 

%  informed verbal consent is subclass of act of informed consenting
%  entity: ICO_0000159
all x (InformedVerbalConsent(x) -> ActOfInformedConsenting(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000158
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000158
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000158
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000158
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000158
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000158
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000158
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000158
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000158
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000158
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000158
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000158
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000158
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000158
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000158
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000158
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000158
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000158
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000158
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000158
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000158
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000158
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000158
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000158
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000158
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000158
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000158
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000158
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000158
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000158
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000158
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000158
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000158
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000158
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000158
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000158
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000158
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000158
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000158
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000158
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000158
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000158
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000158
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000158
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  adult consent process is subclass of informed consent process
%  entity: ICO_0000157
all x (AdultConsentProcess(x) -> InformedConsentProcess(x)). 

%  consenting in short form is subclass of informed consent process
%  entity: ICO_0000157
all x (ConsentingInShortForm(x) -> InformedConsentProcess(x)). 

%  parental informed consent process is subclass of informed consent process
%  entity: ICO_0000157
all x (ParentalInformedConsentProcess(x) -> InformedConsentProcess(x)). 

%  informed consent process with assent is subclass of informed consent process
%  entity: ICO_0000157
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (InformedConsentProcessWithAssent(x) -> InformedConsentProcess(x)). 

%  adult consent process is subclass of informed consent process
%  entity: ICO_0000156
all x (AdultConsentProcess(x) -> InformedConsentProcess(x)). 

%  consenting in short form is subclass of informed consent process
%  entity: ICO_0000156
all x (ConsentingInShortForm(x) -> InformedConsentProcess(x)). 

%  parental informed consent process is subclass of informed consent process
%  entity: ICO_0000156
all x (ParentalInformedConsentProcess(x) -> InformedConsentProcess(x)). 

%  informed consent process with assent is subclass of informed consent process
%  entity: ICO_0000156
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (InformedConsentProcessWithAssent(x) -> InformedConsentProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000150
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000150
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000150
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000150
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000150
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000150
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000150
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000150
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000150
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000150
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000150
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000150
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000150
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000150
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000150
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000150
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000150
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000150
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000150
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000150
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000150
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000150
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000150
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000150
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000150
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000150
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000150
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000150
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000150
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000150
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000150
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000150
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000150
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000150
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000150
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000150
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000150
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000150
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000150
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000150
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000150
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000150
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000150
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000150
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000149
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000149
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000149
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000149
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000149
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000149
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000149
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000149
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000149
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000149
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000149
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000149
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000149
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000149
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000149
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000149
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000149
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000149
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000149
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000149
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000149
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000149
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000149
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000149
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000149
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000149
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000149
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000149
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000149
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000149
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000149
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000149
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000149
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000149
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000149
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000149
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000149
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000149
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000149
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000149
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000149
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000149
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000149
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000149
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  author role is subclass of role
%  entity: ICO_0000148
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000148
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000148
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000148
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000148
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000148
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000148
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000148
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000148
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000148
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000148
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000148
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000148
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000148
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000148
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000148
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000148
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000148
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000148
all x (ContactRole(x) -> Role(x)). 

%  author role is subclass of role
%  entity: ICO_0000147
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000147
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000147
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000147
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000147
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000147
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000147
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000147
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000147
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000147
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000147
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000147
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000147
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000147
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000147
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000147
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000147
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000147
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000147
all x (ContactRole(x) -> Role(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000145
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000145
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000145
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000145
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000145
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000145
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000145
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000145
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000145
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000145
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000145
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000145
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000145
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000145
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000145
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000145
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000145
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000145
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000145
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000145
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000145
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000145
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000145
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000145
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000145
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000145
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000145
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000145
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000145
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000145
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000145
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000145
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000145
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000145
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000145
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000145
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000145
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000145
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000145
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000145
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000145
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000145
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000145
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000145
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  filled multiple choice text entity is subclass of textual entity
%  entity: ICO_0000141
all x (FilledMultipleChoiceTextEntity(x) -> TextualEntity(x)). 

%  table is subclass of textual entity
%  entity: ICO_0000141
all x (Table(x) -> TextualEntity(x)). 

%  citation is subclass of textual entity
%  entity: ICO_0000141
all x (Citation(x) -> TextualEntity(x)). 

%  citation is subclass of textual entity
%  entity: ICO_0000141
all x (Citation(x) -> TextualEntity(x)). 

%  conclusion textual entity is subclass of textual entity
%  entity: ICO_0000141
all x (ConclusionTextualEntity(x) -> TextualEntity(x)). 

%  hypothesis textual entity is subclass of textual entity
%  entity: ICO_0000141
all x (HypothesisTextualEntity(x) -> TextualEntity(x)). 

%  document title is subclass of textual entity
%  entity: ICO_0000141
all x (DocumentTitle(x) -> TextualEntity(x)). 

%  written name is subclass of textual entity
%  entity: ICO_0000141
all x (WrittenName(x) -> TextualEntity(x)). 

%  question textual entity is subclass of textual entity
%  entity: ICO_0000141
all x (QuestionTextualEntity(x) -> TextualEntity(x)). 

%  institutional identification is subclass of textual entity
%  entity: ICO_0000141
all x (InstitutionalIdentification(x) -> TextualEntity(x)). 

%  caption is subclass of textual entity
%  entity: ICO_0000141
all x (Caption(x) -> TextualEntity(x)). 

%  caption is subclass of textual entity
%  entity: ICO_0000141
all x (Caption(x) -> TextualEntity(x)). 

%  postal address is subclass of textual entity
%  entity: ICO_0000141
all x (PostalAddress(x) -> TextualEntity(x)). 

%  postal address is subclass of textual entity
%  entity: ICO_0000141
all x (PostalAddress(x) -> TextualEntity(x)). 

%  investigation title is subclass of textual entity
%  entity: ICO_0000141
all x (InvestigationTitle(x) -> TextualEntity(x)). 

%  investigation title is subclass of textual entity
%  entity: ICO_0000141
all x (InvestigationTitle(x) -> TextualEntity(x)). 

%  eligibility questionnaire is subclass of questionnaire
%  entity: ICO_0000140
all x (EligibilityQuestionnaire(x) -> Questionnaire(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000138
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000138
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000138
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000138
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000138
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000138
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000138
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  institutional review board approval number is subclass of review board approval number
%  entity: ICO_0000131
all x (InstitutionalReviewBoardApprovalNumber(x) -> ReviewBoardApprovalNumber(x)). 

%  repository of documents is subclass of site
%  entity: ICO_0000118
all x (RepositoryOfDocuments(x) -> Site(x)). 

%  geographic location is subclass of site
%  entity: ICO_0000118
all x (GeographicLocation(x) -> Site(x)). 

%  jurisdiction is subclass of site
%  entity: ICO_0000118
all x (Jurisdiction(x) -> Site(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000116
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000116
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000116
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000116
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000116
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000116
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000116
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000116
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000116
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000116
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000116
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000116
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000116
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000116
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000116
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000116
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000116
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000116
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000116
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000116
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000116
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000116
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000116
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000116
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000116
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000116
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000116
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000116
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000116
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000116
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000116
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000116
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000116
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000116
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000116
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000116
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000116
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000116
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000116
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000116
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000116
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000116
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000116
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000116
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000113
all x (Symbol(x) -> InformationContentEntity(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000113
all x (Symbol(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000113
all x (Utterance(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000113
all x (Utterance(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000113
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000113
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000113
all x (DataItem(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000113
all x (DataItem(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000113
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000113
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000113
all x (Signature(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000113
all x (Signature(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000113
all x (Figure(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000113
all x (Figure(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000113
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000113
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000113
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000113
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000113
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000113
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000113
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000113
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000113
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000113
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000113
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000113
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000113
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000113
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000113
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000113
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000113
all x (Document(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000113
all x (Document(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000113
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000113
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000113
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000113
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000113
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000113
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  data administration function is subclass of function
%  entity: ICO_0000112
all x (DataAdministrationFunction(x) -> Function(x)). 

%  review board approval number is subclass of symbol
%  entity: ICO_0000111
all x (ReviewBoardApprovalNumber(x) -> Symbol(x)). 

%  numeral is subclass of symbol
%  entity: ICO_0000111
all x (Numeral(x) -> Symbol(x)). 

%  serial number is subclass of symbol
%  entity: ICO_0000111
all x (SerialNumber(x) -> Symbol(x)). 

%  version number is subclass of symbol
%  entity: ICO_0000111
all x (VersionNumber(x) -> Symbol(x)). 

%  centrally registered identifier symbol is subclass of symbol
%  entity: ICO_0000111
all x (CentrallyRegisteredIdentifierSymbol(x) -> Symbol(x)). 

%  centrally registered identifier symbol is subclass of symbol
%  entity: ICO_0000111
all x (CentrallyRegisteredIdentifierSymbol(x) -> Symbol(x)). 

%  model number is subclass of symbol
%  entity: ICO_0000111
all x (ModelNumber(x) -> Symbol(x)). 

%  lot number is subclass of symbol
%  entity: ICO_0000111
all x (LotNumber(x) -> Symbol(x)). 

%  standard medical treatment is subclass of treatment
%  entity: ICO_0000110
all x (StandardMedicalTreatment(x) -> Treatment(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000109
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000109
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000109
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000109
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000109
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000109
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000109
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000109
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000109
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000109
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000109
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000109
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000109
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000109
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000109
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000109
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000109
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000109
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000109
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000109
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000109
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000109
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000109
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000109
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000109
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000109
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000109
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000109
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000109
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000109
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000109
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000109
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000109
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000109
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000109
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000109
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000109
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000109
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000109
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000109
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000109
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000109
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000109
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000109
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000108
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000108
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000108
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000108
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000108
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000108
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000108
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000108
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000108
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000108
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000108
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000108
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000108
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000108
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000108
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000108
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000108
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000108
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000108
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000108
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000108
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000108
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000108
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000108
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000108
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000108
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000108
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000108
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000108
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000108
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000108
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000108
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000108
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000108
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000108
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000108
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000108
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000108
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000108
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000108
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000108
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000108
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000108
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000108
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  treatment is subclass of process
%  entity: ICO_0000107
all x (Treatment(x) -> Process(x)). 

%  planned process is subclass of process
%  entity: ICO_0000107
all x (PlannedProcess(x) -> Process(x)). 

%  planned process is subclass of process
%  entity: ICO_0000107
all x (PlannedProcess(x) -> Process(x)). 

%  process profile is subclass of process
%  entity: ICO_0000107
all x (ProcessProfile(x) -> Process(x)). 

%  authentication is subclass of process
%  entity: ICO_0000107
all x (Authentication(x) -> Process(x)). 

%  authentication is subclass of process
%  entity: ICO_0000107
all x (Authentication(x) -> Process(x)). 

%  oscillating is subclass of process
%  entity: ICO_0000107
all x (Oscillating(x) -> Process(x)). 

%  history is subclass of process
%  entity: ICO_0000107
all x (History(x) -> Process(x)). 

%  stasis is subclass of process
%  entity: ICO_0000107
all x (Stasis(x) -> Process(x)). 

%  study termination is subclass of process
%  entity: ICO_0000107
all x (StudyTermination(x) -> Process(x)). 

%  protected health information entity is subclass of health information entity
%  entity: ICO_0000103
all x (ProtectedHealthInformationEntity(x) -> HealthInformationEntity(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000101
all x (Symbol(x) -> InformationContentEntity(x)). 

%  symbol is subclass of information content entity
%  entity: ICO_0000101
all x (Symbol(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  document part is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentPart(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000101
all x (Utterance(x) -> InformationContentEntity(x)). 

%  utterance is subclass of information content entity
%  entity: ICO_0000101
all x (Utterance(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000101
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  datum label is subclass of information content entity
%  entity: ICO_0000101
all x (DatumLabel(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000101
all x (DataItem(x) -> InformationContentEntity(x)). 

%  data item is subclass of information content entity
%  entity: ICO_0000101
all x (DataItem(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  documented identity is subclass of information content entity
%  entity: ICO_0000101
all x (DocumentedIdentity(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  centrally registered identifier is subclass of information content entity
%  entity: ICO_0000101
all x (CentrallyRegisteredIdentifier(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000101
all x (Signature(x) -> InformationContentEntity(x)). 

%  signature is subclass of information content entity
%  entity: ICO_0000101
all x (Signature(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000101
all x (Figure(x) -> InformationContentEntity(x)). 

%  figure is subclass of information content entity
%  entity: ICO_0000101
all x (Figure(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000101
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  textual entity is subclass of information content entity
%  entity: ICO_0000101
all x (TextualEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000101
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  health information entity is subclass of information content entity
%  entity: ICO_0000101
all x (HealthInformationEntity(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000101
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  grapheme is subclass of information content entity
%  entity: ICO_0000101
all x (Grapheme(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000101
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000101
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  identifier is subclass of information content entity
%  entity: ICO_0000101
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (Identifier(x) -> InformationContentEntity(x)). 

%  proper name is subclass of information content entity
%  entity: ICO_0000101
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (ProperName(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000101
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  anonymized information content entity is subclass of information content entity
%  entity: ICO_0000101
all x (AnonymizedInformationContentEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000101
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000101
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000101
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  directive information entity is subclass of information content entity
%  entity: ICO_0000101
all x (DirectiveInformationEntity(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000101
all x (Document(x) -> InformationContentEntity(x)). 

%  document is subclass of information content entity
%  entity: ICO_0000101
all x (Document(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000101
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  email address is subclass of information content entity
%  entity: ICO_0000101
all x (EmailAddress(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000101
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  narrative object is subclass of information content entity
%  entity: ICO_0000101
all x (NarrativeObject(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000101
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  descriptive information content entity is subclass of information content entity
%  entity: ICO_0000101
all x (DescriptiveInformationContentEntity(x) -> InformationContentEntity(x)). 

%  research-related injury is subclass of injury
%  entity: ICO_0000100
all x (Research-RelatedInjury(x) -> Injury(x)). 

%  minimal risk is subclass of risk
%  entity: ICO_0000095
all x (MinimalRisk(x) -> Risk(x)). 

%  investigation period is subclass of one-dimensional temporal region
%  entity: ICO_0000088
all x (InvestigationPeriod(x) -> One-DimensionalTemporalRegion(x)). 

%  participation duration is subclass of one-dimensional temporal region
%  entity: ICO_0000088
all x (ParticipationDuration(x) -> One-DimensionalTemporalRegion(x)). 

%  time stamped measurement datum is subclass of measurement datum
%  entity: ICO_0000087
all x (TimeStampedMeasurementDatum(x) -> MeasurementDatum(x)). 

%  time stamped measurement datum is subclass of measurement datum
%  entity: ICO_0000087
all x (TimeStampedMeasurementDatum(x) -> MeasurementDatum(x)). 

%  scalar measurement datum is subclass of measurement datum
%  entity: ICO_0000087
all x (ScalarMeasurementDatum(x) -> MeasurementDatum(x)). 

%  scalar measurement datum is subclass of measurement datum
%  entity: ICO_0000087
all x (ScalarMeasurementDatum(x) -> MeasurementDatum(x)). 

%  scalar measurement datum is subclass of measurement datum
%  entity: ICO_0000087
all x (ScalarMeasurementDatum(x) -> MeasurementDatum(x)). 

%  study duration measurement is subclass of measurement datum
%  entity: ICO_0000087
all x (StudyDurationMeasurement(x) -> MeasurementDatum(x)). 

%  medical record is subclass of document
%  entity: ICO_0000085
all x (MedicalRecord(x) -> Document(x)). 

%  informed assent form is subclass of document
%  entity: ICO_0000085
all x (InformedAssentForm(x) -> Document(x)). 

%  publication is subclass of document
%  entity: ICO_0000085
all x (Publication(x) -> Document(x)). 

%  regulatory document is subclass of document
%  entity: ICO_0000085
all x (RegulatoryDocument(x) -> Document(x)). 

%  document act input document is subclass of document
%  entity: ICO_0000085
all x (DocumentActInputDocument(x) -> Document(x)). 

%  questionnaire is subclass of document
%  entity: ICO_0000085
all x (Questionnaire(x) -> Document(x)). 

%  patent is subclass of document
%  entity: ICO_0000085
all x (Patent(x) -> Document(x)). 

%  report is subclass of document
%  entity: ICO_0000085
all x (Report(x) -> Document(x)). 

%  adult consent process is subclass of informed consent process
%  entity: ICO_0000084
all x (AdultConsentProcess(x) -> InformedConsentProcess(x)). 

%  consenting in short form is subclass of informed consent process
%  entity: ICO_0000084
all x (ConsentingInShortForm(x) -> InformedConsentProcess(x)). 

%  parental informed consent process is subclass of informed consent process
%  entity: ICO_0000084
all x (ParentalInformedConsentProcess(x) -> InformedConsentProcess(x)). 

%  informed consent process with assent is subclass of informed consent process
%  entity: ICO_0000084
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (InformedConsentProcessWithAssent(x) -> InformedConsentProcess(x)). 

%  individually identifiable health information entity is subclass of protected health information entity
%  entity: ICO_0000083
all x (IndividuallyIdentifiableHealthInformationEntity(x) -> ProtectedHealthInformationEntity(x)). 

%  institutional review board is subclass of organization
%  entity: ICO_0000079
all x (InstitutionalReviewBoard(x) -> Organization(x)). 

%  regulatory body is subclass of organization
%  entity: ICO_0000079
all x (RegulatoryBody(x) -> Organization(x)). 

%  profit organization is subclass of organization
%  entity: ICO_0000079
all x (ProfitOrganization(x) -> Organization(x)). 

%  nonprofit organization is subclass of organization
%  entity: ICO_0000079
all x (NonprofitOrganization(x) -> Organization(x)). 

%  risk is subclass of disposition
%  entity: ICO_0000078
all x (Risk(x) -> Disposition(x)). 

%  benefit is subclass of disposition
%  entity: ICO_0000078
all x (Benefit(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000078
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000078
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  function is subclass of disposition
%  entity: ICO_0000078
all x (Function(x) -> Disposition(x)). 

%  risk is subclass of disposition
%  entity: ICO_0000077
all x (Risk(x) -> Disposition(x)). 

%  benefit is subclass of disposition
%  entity: ICO_0000077
all x (Benefit(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000077
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  capability to consent is subclass of disposition
%  entity: ICO_0000077
all x (CapabilityToConsent(x) -> Disposition(x)). 

%  function is subclass of disposition
%  entity: ICO_0000077
all x (Function(x) -> Disposition(x)). 

%  author role is subclass of role
%  entity: ICO_0000073
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000073
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000073
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000073
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000073
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000073
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000073
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000073
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000073
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000073
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000073
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000073
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000073
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000073
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000073
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000073
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000073
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000073
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000073
all x (ContactRole(x) -> Role(x)). 

%  clinical trial title is subclass of investigation title
%  entity: ICO_0000066
all x (ClinicalTrialTitle(x) -> InvestigationTitle(x)). 

%  clinical trial title is subclass of investigation title
%  entity: ICO_0000066
all x (ClinicalTrialTitle(x) -> InvestigationTitle(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000065
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000065
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000065
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000065
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000065
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000065
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000065
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000065
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000060
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000060
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000060
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000060
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000060
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000060
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000060
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000060
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000060
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000060
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000060
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000060
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000060
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000060
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000060
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000060
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000060
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000060
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000060
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000060
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000060
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000060
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000060
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000060
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000060
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000060
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000060
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000060
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000060
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000060
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000060
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000060
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000060
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000060
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000060
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000060
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000060
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000060
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000060
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000060
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000060
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000060
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000060
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000060
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  data format specification is subclass of directive information entity
%  entity: ICO_0000059
all x (DataFormatSpecification(x) -> DirectiveInformationEntity(x)). 

%  deontic role directive is subclass of directive information entity
%  entity: ICO_0000059
all x (DeonticRoleDirective(x) -> DirectiveInformationEntity(x)). 

%  obligation directive is subclass of directive information entity
%  entity: ICO_0000059
all x (ObligationDirective(x) -> DirectiveInformationEntity(x)). 

%  conditional specification is subclass of directive information entity
%  entity: ICO_0000059
all x (ConditionalSpecification(x) -> DirectiveInformationEntity(x)). 

%  confidentiality directive is subclass of directive information entity
%  entity: ICO_0000059
all x (ConfidentialityDirective(x) -> DirectiveInformationEntity(x)). 

%  restriction directive is subclass of directive information entity
%  entity: ICO_0000059
all x (RestrictionDirective(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000059
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000059
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  liability directive is subclass of directive information entity
%  entity: ICO_0000059
all x (LiabilityDirective(x) -> DirectiveInformationEntity(x)). 

%  ethics directive is subclass of directive information entity
%  entity: ICO_0000059
all x (EthicsDirective(x) -> DirectiveInformationEntity(x)). 

%  action specification is subclass of directive information entity
%  entity: ICO_0000059
all x (ActionSpecification(x) -> DirectiveInformationEntity(x)). 

%  consequent directive is subclass of directive information entity
%  entity: ICO_0000059
all x (ConsequentDirective(x) -> DirectiveInformationEntity(x)). 

%  answer directive is subclass of directive information entity
%  entity: ICO_0000059
all x (AnswerDirective(x) -> DirectiveInformationEntity(x)). 

%  permission directive is subclass of directive information entity
%  entity: ICO_0000059
all x (PermissionDirective(x) -> DirectiveInformationEntity(x)). 

%  contact directive is subclass of directive information entity
%  entity: ICO_0000059
all x (ContactDirective(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000059
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000059
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000059
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  recontact method directive is subclass of directive information entity
%  entity: ICO_0000059
all x (RecontactMethodDirective(x) -> DirectiveInformationEntity(x)). 

%  disclosure directive is subclass of directive information entity
%  entity: ICO_0000059
all x (DisclosureDirective(x) -> DirectiveInformationEntity(x)). 

%  objective specification is subclass of directive information entity
%  entity: ICO_0000059
all x (ObjectiveSpecification(x) -> DirectiveInformationEntity(x)). 

%  source code module is subclass of directive information entity
%  entity: ICO_0000059
all x (SourceCodeModule(x) -> DirectiveInformationEntity(x)). 

%  investigation period is subclass of one-dimensional temporal region
%  entity: ICO_0000058
all x (InvestigationPeriod(x) -> One-DimensionalTemporalRegion(x)). 

%  participation duration is subclass of one-dimensional temporal region
%  entity: ICO_0000058
all x (ParticipationDuration(x) -> One-DimensionalTemporalRegion(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000057
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000057
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000057
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000057
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000057
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000057
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000057
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000057
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000056
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000056
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000056
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000056
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000056
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000056
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000056
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000056
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000054
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000054
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000054
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000054
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000054
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000054
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000054
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000054
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000053
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000053
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000053
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000053
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000053
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000053
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000053
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000053
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  drug testing investigation is subclass of investigation
%  entity: ICO_0000051
all x (DrugTestingInvestigation(x) -> Investigation(x)). 

%  cancer research investigation is subclass of investigation
%  entity: ICO_0000051
all x (CancerResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000051
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  nonprofit research investigation is subclass of investigation
%  entity: ICO_0000051
all x (NonprofitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000051
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  for-profit research investigation is subclass of investigation
%  entity: ICO_0000051
all x (For-ProfitResearchInvestigation(x) -> Investigation(x)). 

%  clinical trial is subclass of investigation
%  entity: ICO_0000051
all x (ClinicalTrial(x) -> Investigation(x)). 

%  human research investigation is subclass of investigation
%  entity: ICO_0000051
all x (HumanResearchInvestigation(x) -> Investigation(x)). 

%  institutional review board is subclass of organization
%  entity: ICO_0000049
all x (InstitutionalReviewBoard(x) -> Organization(x)). 

%  regulatory body is subclass of organization
%  entity: ICO_0000049
all x (RegulatoryBody(x) -> Organization(x)). 

%  profit organization is subclass of organization
%  entity: ICO_0000049
all x (ProfitOrganization(x) -> Organization(x)). 

%  nonprofit organization is subclass of organization
%  entity: ICO_0000049
all x (NonprofitOrganization(x) -> Organization(x)). 

%  institutional review board is subclass of organization
%  entity: ICO_0000048
all x (InstitutionalReviewBoard(x) -> Organization(x)). 

%  regulatory body is subclass of organization
%  entity: ICO_0000048
all x (RegulatoryBody(x) -> Organization(x)). 

%  profit organization is subclass of organization
%  entity: ICO_0000048
all x (ProfitOrganization(x) -> Organization(x)). 

%  nonprofit organization is subclass of organization
%  entity: ICO_0000048
all x (NonprofitOrganization(x) -> Organization(x)). 

%  human population is subclass of population
%  entity: ICO_0000047
all x (HumanPopulation(x) -> Population(x)). 

%  author role is subclass of role
%  entity: ICO_0000045
all x (AuthorRole(x) -> Role(x)). 

%  credential role is subclass of role
%  entity: ICO_0000045
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (CredentialRole(x) -> Role(x)). 

%  obligee role is subclass of role
%  entity: ICO_0000045
all x (ObligeeRole(x) -> Role(x)). 

%  deontic role is subclass of role
%  entity: ICO_0000045
all x (DeonticRole(x) -> Role(x)). 

%  candidate ineligible for study role is subclass of role
%  entity: ICO_0000045
all x (CandidateIneligibleForStudyRole(x) -> Role(x)). 

%  deontic declaration performer role is subclass of role
%  entity: ICO_0000045
all x (DeonticDeclarationPerformerRole(x) -> Role(x)). 

%  research subject role is subclass of role
%  entity: ICO_0000045
all x (ResearchSubjectRole(x) -> Role(x)). 

%  obligor role is subclass of role
%  entity: ICO_0000045
all x (ObligorRole(x) -> Role(x)). 

%  investigator role is subclass of role
%  entity: ICO_0000045
all x (InvestigatorRole(x) -> Role(x)). 

%  legal representative role is subclass of role
%  entity: ICO_0000045
all x (LegalRepresentativeRole(x) -> Role(x)). 

%  specimen role is subclass of role
%  entity: ICO_0000045
all x (SpecimenRole(x) -> Role(x)). 

%  candidate eligible for study role is subclass of role
%  entity: ICO_0000045
all x (CandidateEligibleForStudyRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000045
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  document act performer role is subclass of role
%  entity: ICO_0000045
all x (DocumentActPerformerRole(x) -> Role(x)). 

%  patient role is subclass of role
%  entity: ICO_0000045
all x (PatientRole(x) -> Role(x)). 

%  assenter role is subclass of role
%  entity: ICO_0000045
all x (AssenterRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000045
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  document act template creator role is subclass of role
%  entity: ICO_0000045
all x (DocumentActTemplateCreatorRole(x) -> Role(x)). 

%  contact role is subclass of role
%  entity: ICO_0000045
all x (ContactRole(x) -> Role(x)). 

%  data about an ontology part is subclass of data item
%  entity: ICO_0000044
all x (DataAboutAnOntologyPart(x) -> DataItem(x)). 

%  informed consent identification code is subclass of data item
%  entity: ICO_0000044
all x (InformedConsentIdentificationCode(x) -> DataItem(x)). 

%  measurement datum is subclass of data item
%  entity: ICO_0000044
all x (MeasurementDatum(x) -> DataItem(x)). 

%  data set is subclass of data item
%  entity: ICO_0000044
all x (DataSet(x) -> DataItem(x)). 

%  setting datum is subclass of data item
%  entity: ICO_0000044
all x (SettingDatum(x) -> DataItem(x)). 

%  consent code is subclass of data item
%  entity: ICO_0000044
all x (ConsentCode(x) -> DataItem(x)). 

%  cartesian spatial coordinate datum is subclass of data item
%  entity: ICO_0000044
all x (CartesianSpatialCoordinateDatum(x) -> DataItem(x)). 

%  cartesian spatial coordinate datum is subclass of data item
%  entity: ICO_0000044
all x (CartesianSpatialCoordinateDatum(x) -> DataItem(x)). 

%  cartesian spatial coordinate datum is subclass of data item
%  entity: ICO_0000044
all x (CartesianSpatialCoordinateDatum(x) -> DataItem(x)). 

%  project end date specification is subclass of date specification
%  entity: ICO_0000039
all x (ProjectEndDateSpecification(x) -> DateSpecification(x)). 

%  project starting date specification is subclass of date specification
%  entity: ICO_0000039
all x (ProjectStartingDateSpecification(x) -> DateSpecification(x)). 

%  project end date specification is subclass of date specification
%  entity: ICO_0000038
all x (ProjectEndDateSpecification(x) -> DateSpecification(x)). 

%  project starting date specification is subclass of date specification
%  entity: ICO_0000038
all x (ProjectStartingDateSpecification(x) -> DateSpecification(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000034
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000034
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000034
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000034
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000034
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000034
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000034
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000033
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000033
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000033
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000033
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000033
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000033
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000033
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed assent form for cognitively impaired is subclass of informed assent form
%  entity: ICO_0000032
all x (InformedAssentFormForCognitivelyImpaired(x) -> InformedAssentForm(x)). 

%  informed assent form for child or minor is subclass of informed assent form
%  entity: ICO_0000032
all x (InformedAssentFormForChildOrMinor(x) -> InformedAssentForm(x)). 

%  data format specification is subclass of directive information entity
%  entity: ICO_0000022
all x (DataFormatSpecification(x) -> DirectiveInformationEntity(x)). 

%  deontic role directive is subclass of directive information entity
%  entity: ICO_0000022
all x (DeonticRoleDirective(x) -> DirectiveInformationEntity(x)). 

%  obligation directive is subclass of directive information entity
%  entity: ICO_0000022
all x (ObligationDirective(x) -> DirectiveInformationEntity(x)). 

%  conditional specification is subclass of directive information entity
%  entity: ICO_0000022
all x (ConditionalSpecification(x) -> DirectiveInformationEntity(x)). 

%  confidentiality directive is subclass of directive information entity
%  entity: ICO_0000022
all x (ConfidentialityDirective(x) -> DirectiveInformationEntity(x)). 

%  restriction directive is subclass of directive information entity
%  entity: ICO_0000022
all x (RestrictionDirective(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000022
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000022
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  liability directive is subclass of directive information entity
%  entity: ICO_0000022
all x (LiabilityDirective(x) -> DirectiveInformationEntity(x)). 

%  ethics directive is subclass of directive information entity
%  entity: ICO_0000022
all x (EthicsDirective(x) -> DirectiveInformationEntity(x)). 

%  action specification is subclass of directive information entity
%  entity: ICO_0000022
all x (ActionSpecification(x) -> DirectiveInformationEntity(x)). 

%  consequent directive is subclass of directive information entity
%  entity: ICO_0000022
all x (ConsequentDirective(x) -> DirectiveInformationEntity(x)). 

%  answer directive is subclass of directive information entity
%  entity: ICO_0000022
all x (AnswerDirective(x) -> DirectiveInformationEntity(x)). 

%  permission directive is subclass of directive information entity
%  entity: ICO_0000022
all x (PermissionDirective(x) -> DirectiveInformationEntity(x)). 

%  contact directive is subclass of directive information entity
%  entity: ICO_0000022
all x (ContactDirective(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000022
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000022
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000022
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  recontact method directive is subclass of directive information entity
%  entity: ICO_0000022
all x (RecontactMethodDirective(x) -> DirectiveInformationEntity(x)). 

%  disclosure directive is subclass of directive information entity
%  entity: ICO_0000022
all x (DisclosureDirective(x) -> DirectiveInformationEntity(x)). 

%  objective specification is subclass of directive information entity
%  entity: ICO_0000022
all x (ObjectiveSpecification(x) -> DirectiveInformationEntity(x)). 

%  source code module is subclass of directive information entity
%  entity: ICO_0000022
all x (SourceCodeModule(x) -> DirectiveInformationEntity(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000015
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000015
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000015
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000015
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000015
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000015
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000015
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  complete informed consent form indicating consent is subclass of informed consent form
%  entity: ICO_0000014
all x (CompleteInformedConsentFormIndicatingConsent(x) -> InformedConsentForm(x)). 

%  informed consent form for qualitative research involving children is subclass of informed consent form
%  entity: ICO_0000014
all x (InformedConsentFormForQualitativeResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  signed informed consent form is subclass of informed consent form
%  entity: ICO_0000014
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (SignedInformedConsentForm(x) -> InformedConsentForm(x)). 

%  informed consent form for vaccination is subclass of informed consent form
%  entity: ICO_0000014
all x (InformedConsentFormForVaccination(x) -> InformedConsentForm(x)). 

%  informed consent form for clinical research involving children is subclass of informed consent form
%  entity: ICO_0000014
all x (InformedConsentFormForClinicalResearchInvolvingChildren(x) -> InformedConsentForm(x)). 

%  informed consent form for human blood sample collection is subclass of informed consent form
%  entity: ICO_0000014
all x (InformedConsentFormForHumanBloodSampleCollection(x) -> InformedConsentForm(x)). 

%  incomplete informed consent form is subclass of informed consent form
%  entity: ICO_0000014
all x (IncompleteInformedConsentForm(x) -> InformedConsentForm(x)). 

%  data format specification is subclass of directive information entity
%  entity: ICO_0000009
all x (DataFormatSpecification(x) -> DirectiveInformationEntity(x)). 

%  deontic role directive is subclass of directive information entity
%  entity: ICO_0000009
all x (DeonticRoleDirective(x) -> DirectiveInformationEntity(x)). 

%  obligation directive is subclass of directive information entity
%  entity: ICO_0000009
all x (ObligationDirective(x) -> DirectiveInformationEntity(x)). 

%  conditional specification is subclass of directive information entity
%  entity: ICO_0000009
all x (ConditionalSpecification(x) -> DirectiveInformationEntity(x)). 

%  confidentiality directive is subclass of directive information entity
%  entity: ICO_0000009
all x (ConfidentialityDirective(x) -> DirectiveInformationEntity(x)). 

%  restriction directive is subclass of directive information entity
%  entity: ICO_0000009
all x (RestrictionDirective(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000009
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  date specification is subclass of directive information entity
%  entity: ICO_0000009
all x (DateSpecification(x) -> DirectiveInformationEntity(x)). 

%  liability directive is subclass of directive information entity
%  entity: ICO_0000009
all x (LiabilityDirective(x) -> DirectiveInformationEntity(x)). 

%  ethics directive is subclass of directive information entity
%  entity: ICO_0000009
all x (EthicsDirective(x) -> DirectiveInformationEntity(x)). 

%  action specification is subclass of directive information entity
%  entity: ICO_0000009
all x (ActionSpecification(x) -> DirectiveInformationEntity(x)). 

%  consequent directive is subclass of directive information entity
%  entity: ICO_0000009
all x (ConsequentDirective(x) -> DirectiveInformationEntity(x)). 

%  answer directive is subclass of directive information entity
%  entity: ICO_0000009
all x (AnswerDirective(x) -> DirectiveInformationEntity(x)). 

%  permission directive is subclass of directive information entity
%  entity: ICO_0000009
all x (PermissionDirective(x) -> DirectiveInformationEntity(x)). 

%  contact directive is subclass of directive information entity
%  entity: ICO_0000009
all x (ContactDirective(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000009
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000009
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  plan specification is subclass of directive information entity
%  entity: ICO_0000009
all x (PlanSpecification(x) -> DirectiveInformationEntity(x)). 

%  recontact method directive is subclass of directive information entity
%  entity: ICO_0000009
all x (RecontactMethodDirective(x) -> DirectiveInformationEntity(x)). 

%  disclosure directive is subclass of directive information entity
%  entity: ICO_0000009
all x (DisclosureDirective(x) -> DirectiveInformationEntity(x)). 

%  objective specification is subclass of directive information entity
%  entity: ICO_0000009
all x (ObjectiveSpecification(x) -> DirectiveInformationEntity(x)). 

%  source code module is subclass of directive information entity
%  entity: ICO_0000009
all x (SourceCodeModule(x) -> DirectiveInformationEntity(x)). 

%  description of participation benefit is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfParticipationBenefit(x) -> DescriptiveInformationContentEntity(x)). 

%  description of participation risk is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfParticipationRisk(x) -> DescriptiveInformationContentEntity(x)). 

%  legally authorized representative role is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (LegallyAuthorizedRepresentativeRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of voluntary participation is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfVoluntaryParticipation(x) -> DescriptiveInformationContentEntity(x)). 

%  description of broad consent is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfBroadConsent(x) -> DescriptiveInformationContentEntity(x)). 

%  desciption of research procedure is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DesciptionOfResearchProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  IRB member role is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (IrbMemberRole(x) -> DescriptiveInformationContentEntity(x)). 

%  description of trigger condition is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfTriggerCondition(x) -> DescriptiveInformationContentEntity(x)). 

%  description of medical procedure is subclass of descriptive information content entity
%  entity: ICO_0000008
all x (DescriptionOfMedicalProcedure(x) -> DescriptiveInformationContentEntity(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000004
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000004
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000004
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000004
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000004
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000004
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000004
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000004
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000004
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000004
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000004
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000004
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000004
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000004
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000004
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000004
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000004
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000004
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000004
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000004
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000004
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000004
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000004
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000004
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000004
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000004
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000004
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000004
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000004
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000004
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000004
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000004
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000004
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000004
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000004
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000004
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000004
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000004
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000004
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000004
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000004
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000004
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000004
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000004
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  associating information with a centrally registered identifier in its registry is subclass of planned process
%  entity: ICO_0000003
all x (AssociatingInformationWithACentrallyRegisteredIdentifierInItsRegistry(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000003
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  declining to provide consent is subclass of planned process
%  entity: ICO_0000003
all x (DecliningToProvideConsent(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000003
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  approving an informed consent form is subclass of planned process
%  entity: ICO_0000003
all x (ApprovingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000003
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  eligibility screening process is subclass of planned process
%  entity: ICO_0000003
all x (EligibilityScreeningProcess(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000003
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  biological sample collecting is subclass of planned process
%  entity: ICO_0000003
all x (BiologicalSampleCollecting(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  assigning a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (AssigningACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000003
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  validating an informed consent form is subclass of planned process
%  entity: ICO_0000003
all x (ValidatingAnInformedConsentForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000003
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of filling out form is subclass of planned process
%  entity: ICO_0000003
all x (ActOfFillingOutForm(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000003
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  act of anonymizing is subclass of planned process
%  entity: ICO_0000003
all x (ActOfAnonymizing(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000003
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  withdrawing participation in study is subclass of planned process
%  entity: ICO_0000003
all x (WithdrawingParticipationInStudy(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000003
all x (SocialAct(x) -> PlannedProcess(x)). 

%  social act is subclass of planned process
%  entity: ICO_0000003
all x (SocialAct(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000003
all x (Investigation(x) -> PlannedProcess(x)). 

%  investigation is subclass of planned process
%  entity: ICO_0000003
all x (Investigation(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000003
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  secondary use is subclass of planned process
%  entity: ICO_0000003
all x (SecondaryUse(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000003
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  canceling a permission is subclass of planned process
%  entity: ICO_0000003
all x (CancelingAPermission(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000003
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  storing a specimen is subclass of planned process
%  entity: ICO_0000003
all x (StoringASpecimen(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000003
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  informed consent process is subclass of planned process
%  entity: ICO_0000003
all x (InformedConsentProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000003
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  utterance process is subclass of planned process
%  entity: ICO_0000003
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (UtteranceProcess(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  looking up a centrally registered identifier is subclass of planned process
%  entity: ICO_0000003
all x (LookingUpACentrallyRegisteredIdentifier(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  documenting is subclass of planned process
%  entity: ICO_0000003
all x (Documenting(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000003
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  study design execution is subclass of planned process
%  entity: ICO_0000003
all x (StudyDesignExecution(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000003
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  act of using participant data is subclass of planned process
%  entity: ICO_0000003
all x (ActOfUsingParticipantData(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  data item extraction from journal article is subclass of planned process
%  entity: ICO_0000003
all x (DataItemExtractionFromJournalArticle(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000003
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  dubbing process is subclass of planned process
%  entity: ICO_0000003
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (DubbingProcess(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000003
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  act of contact for future research is subclass of planned process
%  entity: ICO_0000003
all x (ActOfContactForFutureResearch(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000003
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  postmortem donation of biological specimen is subclass of planned process
%  entity: ICO_0000003
all x (PostmortemDonationOfBiologicalSpecimen(x) -> PlannedProcess(x)). 

%  informed consent form is subclass of document act input document
%  entity: ICO_0000001
% Has EquivalenceAxiom! 
% Check FOL_output/AXIOMS_output.txt for EquivalenceAxiom
all x (InformedConsentForm(x) -> DocumentActInputDocument(x)). 

